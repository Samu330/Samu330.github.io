<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Tetris</title>
  <style>
.game-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100vh;
}

.game-board {
  display: grid;
  grid-template-columns: repeat(10, 30px);
  grid-template-rows: repeat(20, 30px);
  gap: 1px;
  background-color: #f2f2f2;
}

.score {
  margin-top: 20px;
}
  </style>
</head>
<body>
  <div class="game-container">
    <div class="game-board"></div>
    <div class="score">Score: <span id="score">0</span></div>
  </div>

  <script>
document.addEventListener('DOMContentLoaded', () => {
  const board = document.querySelector('.game-board');
  const scoreDisplay = document.getElementById('score');
  let squares = Array.from(board.querySelectorAll('div'));
  const width = 10;
  let score = 0;

  // Tetrominoes
  const lTetromino = [
    [1, width + 1, width * 2 + 1, 2],
    [width, width + 1, width + 2, width * 2 + 2],
    [1, width + 1, width * 2 + 1, width * 2],
    [width, width * 2, width * 2 + 1, width * 2 + 2]
  ];

  // Draw the Tetromino
  function draw() {
    current.forEach(index => {
      squares[currentPosition + index].classList.add('tetromino');
    });
  }

  // Undraw the Tetromino
  function undraw() {
    current.forEach(index => {
      squares[currentPosition + index].classList.remove('tetromino');
    });
  }

  // Move Tetromino down every second
  timerId = setInterval(moveDown, 1000);

  // Move Tetromino down
  function moveDown() {
    undraw();
    currentPosition += width;
    draw();
    freeze();
  }

  // Freeze Tetromino when it reaches the bottom or another Tetromino
  function freeze() {
    if (current.some(index => squares[currentPosition + index + width].classList.contains('taken'))) {
      current.forEach(index => squares[currentPosition + index].classList.add('taken'));

      // Start a new Tetromino falling
      random = Math.floor(Math.random() * tetrominoes.length);
      current = tetrominoes[random][rotation];
      currentPosition = 4;
      draw();

      // Check for line clear
      addScore();
    }
  }

  // Add score for each line cleared
  function addScore() {
    for (let i = 0; i < 199; i += width) {
      const row = [i, i + 1, i + 2, i + 3, i + 4, i + 5, i + 6, i + 7, i + 8, i + 9];

      if (row.every(index => squares[index].classList.contains('taken'))) {
        score += 10;
        scoreDisplay.innerText = score;
        row.forEach(index => {
          squares[index].classList.remove('taken');
          squares[index].classList.remove('tetromino');
        });

        const squaresRemoved = squares.splice(i, width);
        squares = squaresRemoved.concat(squares);
        squares.forEach(cell => board.appendChild(cell));
      }
    }
  }

  // Assign functions to keyCodes
  function control(e) {
    if (e.keyCode === 37) {
      moveLeft();
    } else if (e.keyCode === 38) {
      rotate();
    } else if (e.keyCode === 39) {
      moveRight();
    } else if (e.keyCode === 40) {
      moveDown();
    }
  }
  document.addEventListener('keydown', control);
});
</script>
</body>
</html>
